
Signal Handling Implementation Plan
1. Design a signal handler class/module:
   - Create `signal_handler.h/cpp` in `include/mycppwebfw/core/` and `src/core/`.
   - Provide methods to register and handle SIGINT/SIGTERM.
2. Integrate with Asio event loop:
   - Use Asioâ€™s signal_set to asynchronously wait for signals.
   - On signal, trigger graceful shutdown (stop server, thread pool, cleanup).
3. Implement configuration reload:
   - Add a method to reload config files on SIGHUP or custom signal.
   - Ensure thread-safe config updates.
4. Resource cleanup:
   - Ensure all connections, buffers, and threads are properly closed.
   - Add hooks in server and thread pool for cleanup on shutdown.
5. Unit and integration tests:
   - Add tests in `core_tests/` for signal handling and shutdown.
   - Simulate signals and verify cleanup/reload.
6. Documentation:
   - Update docs (`docs/howto/deploy_with_docker.md`, `docs/modules/core.md`) with signal handling and reload instructions.
